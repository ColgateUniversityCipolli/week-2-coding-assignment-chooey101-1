riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
(delta.x <- (b-a)/n.rect)
left.points <- a + 0:99*(delta.x)
area <- sum(delta.x*(integrand(left.points)))
}else if(method == "Right"){
(delta.x <- (b-a)/n.rect)
right.points <- a + 1:100*(delta.x)
area <- sum(delta.x*(integrand(right.points)))
}else if(method == "Midpoint"){
(delta.x <- (b-a)/n.rect)
mid.points <- (left.points+right.points)/2
area <- sum(delta.x*(integrand(mid.points)))
}else if(method == "Trapezoidial"){
(delta.x <- (b-a)/n.rect)
trap.points <-  a + 0:99*(delta.x)
area <- (delta.x/2)*(integrand(a)+sum(2*integrand(trap.points))+integrand(b))
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
area
library(stringr)
library(jsonlite)
citation("stringr")
citation("jsonlite")
